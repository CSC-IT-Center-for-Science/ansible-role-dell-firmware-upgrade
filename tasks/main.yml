---

- name: Make sure this is only run on a dell server
  assert:
    that: ansible_system_vendor is match('Dell.*')
    msg: "This role is only meant to be run on Dell systems"
  when: dell_dsu_assert

- name: include multipathd.yml if dell_dsu_manage_multipath_config is True
  include_tasks: multipathd.yml
  when: dell_dsu_manage_multipath_config

- name: Install Dell DSU repo
  environment: "{{ proxy_env|default({}) }}"
  shell: "curl -O https://linux.dell.com/repo/hardware/dsu/bootstrap.cgi && bash bootstrap.cgi"
  args:
     creates: /etc/yum.repos.d/dell-system-update.repo
  tags: skip_ansible_lint
  register: reg_install_dsu_repo
  when: dell_dsu_repo_install
  failed_when: "('Done!' not in reg_install_dsu_repo.stdout) and (reg_install_dsu_repo.rc != 0)"

- name: print reg_install_dsu_repo variable if verbosity is 1
  debug:
    var: reg_install_dsu_repo
    verbosity: 1

- name: Install Dell DSU prerequisites
  yum:
    name: "{{ dell_dsu_prerequisites }}"
    state: present

- name: create /usr/libexec/dell_dup
  file:
    path: /usr/libexec/dell_dup
    state: directory
    mode: '0755'
  when: dell_dsu_rollout_gpg_keys

- name: copy gpg keys
  copy:
    dest: /usr/libexec/dell_dup/{{ item }}
    src: "{{ item }}"
  loop: "{{ dell_dsu_gpg_keys }}"
  when: dell_dsu_rollout_gpg_keys

- name: rpm import gpg keys
  rpm_key:
    key: /usr/libexec/dell_dup/{{ item }}
  loop: "{{ dell_dsu_gpg_keys }}"
  when: dell_dsu_rollout_gpg_keys and not ansible_check_mode

- name: gpg import gpg keys
  command: "gpg --import /usr/libexec/dell_dup/{{ item }}"
  register: reg_dell_dsu_gpg_import
  loop: "{{ dell_dsu_gpg_keys }}"
  changed_when: reg_dell_dsu_gpg_import.stderr is search('imported')
  failed_when: reg_dell_dsu_gpg_import.rc|int != 0
  when: dell_dsu_rollout_gpg_keys

- name: Installing Dell DSU RPM
  yum:
    name: dell-system-update
    state: latest

- name: Init dell_dsu_update_all_firmware
  set_fact:
    dell_dsu_update_all_firmware: False
    dell_dsu_update: False

- name: Set upgrade_categories when dell_dsu_update_all_firmware is True
  set_fact:
    upgrade_categories: all
  when:
    - upgrade_categories is not defined
    - (dell_dsu_update_all_firmware is defined) and (dell_dsu_update_all_firmware)

- name: Set categories_list
  set_fact:
    categories_list: "{{Â upgrade_categories.split(',') }}"
  when: (upgrade_categories is defined)

- name: Set dell_dsu_update_all_firmware to True
  set_fact:
    dell_dsu_update_all_firmware: True
    dell_dsu_update: True
  when: (categories_list is defined) and ("all" in categories_list) and (categories_list | length == 1)

- name: Check if the arguments are well defined
  assert:
    that: firmware_components[item] is defined
  loop: "{{ categories_list }}"
  when: (categories_list is defined) and (not dell_dsu_update_all_firmware)

- name: Set dsu_categories list
  set_fact:
    dsu_categories_list: "{{ (dsu_categories_list | default([])) + [firmware_components[item]] }}"
  loop: "{{ categories_list }}"
  when: (categories_list is defined) and (not dell_dsu_update_all_firmware) 

- name: Set dsu_categories
  set_fact:
    dsu_categories: "{{ dsu_categories_list | join(',') }}"
  loop: "{{ categories_list }}"
  when: (dsu_categories_list is defined)

- name: Set dell_dsu_arguments when dsu_categories are not defined
  set_fact:
    dell_dsu_arguments: " {{ dell_dsu_arguments_base }}"
  when: (dell_dsu_update_all_firmware is defined) and (dell_dsu_update_all_firmware) 

- name: Set dell_dsu_arguments when dsu_categories are defined
  set_fact:
    dell_dsu_arguments: " {{ dell_dsu_arguments_base}} --category={{ dsu_categories }}"
    dell_dsu_update: True
  when: (dsu_categories is defined) 

- name: Update firmware
  command: "dsu {{ dell_dsu_arguments }}"
  when: dell_dsu_update
  register: command_result
  failed_when: command_result.rc not in dell_dsu_changed_exit_codes + dell_dsu_not_changed_exit_codes
  changed_when: command_result.rc in dell_dsu_changed_exit_codes
...
